package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
	"strconv"

	"github.com/yuanzai/chakra/server/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", rand),
		User:   &model.User{ID: input.UserID, Name: "user " + input.UserID},
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// CreateHouse is the resolver for the createHouse field.
func (r *mutationResolver) CreateHouse(ctx context.Context, input model.NewHouse) (*model.House, error) {
	var leases []*model.Lease
	for _, id := range input.Leases {
		if lease, ok := r.leases[id]; ok {
			leases = append(leases, lease)
		}
	}
	house := &model.House{
		ID:      strconv.Itoa(len(r.houses)),
		Address: input.Address,
		State:   input.State,
		Leases:  leases,
	}
	r.houses[house.ID] = house
	return house, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Houses is the resolver for the houses field.
func (r *queryResolver) Houses(ctx context.Context) ([]*model.House, error) {
	var houses []*model.House
	for _, v := range r.houses {
		houses = append(houses, v)
	}
	return houses, nil
}

// FindHouse is the resolver for the findHouse field.
func (r *queryResolver) FindHouse(ctx context.Context, input string) (*model.House, error) {
	return r.houses[input], nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return newMutationResolver() }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return newQueryResolver() }

type mutationResolver struct{ *Resolver }

func newMutationResolver() *mutationResolver {
	return &mutationResolver{NewResolver()}
}

type queryResolver struct{ *Resolver }

func newQueryResolver() *queryResolver {
	return &queryResolver{NewResolver()}
}
